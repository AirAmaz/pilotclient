/* Copyright (C) 2016
 * swift project Community / Contributors
 *
 * This file is part of swift project. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at http://www.swift-project.org/license.html. No part of swift project,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms
 * contained in the LICENSE file.
 */

//! \file

#ifndef BLACKMISC_BUILDCONFIG_H
#define BLACKMISC_BUILDCONFIG_H

#include \"blackmisc/blackmiscexport.h\"
#include <QString>
#include <QDateTime>

$$DEFINE_WITH_BLACKCORE#define WITH_BLACKCORE
$$DEFINE_WITH_BLACKSOUND#define WITH_BLACKSOUND
$$DEFINE_WITH_BLACKINPUT#define WITH_BLACKINPUT
$$DEFINE_WITH_BLACKGUI#define WITH_BLACKGUI
$$DEFINE_WITH_SWIFTDATA#define WITH_SWIFTDATA
$$DEFINE_WITH_SWIFTGUI#define WITH_SWIFTGUI
$$DEFINE_WITH_SWIFTCORE#define WITH_SWIFTCORE
$$DEFINE_WITH_FSX#define WITH_FSX
$$DEFINE_WITH_FS9#define WITH_FS9
$$DEFINE_WITH_XPLANE#define WITH_XPLANE
$$DEFINE_SWIFT_BETA#define SWIFT_BETA
$$DEFINE_SWIFT_SHIPPED#define SWIFT_SHIPPED

namespace BlackMisc
{

    class BLACKMISC_EXPORT CBuildConfig
    {
    public:
        //! with BlackCore?
        static bool isCompiledWithBlackCore();

        //! with BlackSound?
        static bool isCompiledWithBlackSound();

        //! with BlackInput?
        static bool isCompiledWithBlackInput();

        //! with FS9 support?
        static bool isCompiledWithFs9Support();

        //! with FSX support?
        static bool isCompiledWithFsxSupport();

        //! with P3D support
        static bool isCompiledWithP3DSupport();

        //! Compiled with any MS Flight Simulator support (P3D, FSX, FS9)
        static bool isCompiledWithMsFlightSimulatorSupport();

        //! with XPlane support?
        static bool isCompiledWithXPlaneSupport();

        //! with any simulator libraries
        static bool isCompiledWithFlightSimulatorSupport();

        //! with GUI?
        static bool isCompiledWithGui();

        //! Debug build?
        static bool isDebugBuild();

        //! Release build?
        static bool isReleaseBuild();

        //! Beta test?
        static bool isBetaTest();

        //! Can run in dev. environment
        static bool canRunInDeveloperEnvironment();

        //! Shipped version?
        static bool isShippedVersion();

        //! Running on Windows NT platform?
        static bool isRunningOnWindowsNtPlatform();

        //! Application directory where current application is located
        //! \todo Move to to CApplication
        static const QString &getApplicationDir();

        //! Where resource files (static DB files, ...) etc are located
        static const QString &getSwiftResourceDir();

        //! Bootstrap resource directory
        static const QString &getBootstrapResourceFile();

        //! Where static DB files are located
        static const QString &getSwiftStaticDbFilesDir();

        //! Where images are located
        static const QString &getImagesDir();

        //! Directory where data can be stored
        static const QString &getDocumentationDirectory();

        //! Info string about compilation
        static const QString &compiledWithInfo(bool shortVersion = true);

        //! Executable name for swift GUI, no(!) appendix
        static const QString &swiftGuiExecutableName();

        //! Executable name for swift core, no(!) appendix
        static const QString &swiftCoreExecutableName();

        //! Executable name for swift data, no(!) appendix
        static const QString &swiftDataExecutableName();

        //! swift team default servers for DB, bootstrap etc.
        static const QStringList &swiftTeamDefaultServers();

        //! End of lifetime
        static const QDateTime &getEol()
        {
            static const QString eol(\"$$BLACK_EOL\");
            static const QDateTime dt(eol.isEmpty() ? QDateTime() : QDateTime::fromString(eol, \"yyyyMMdd\"));
            return dt;
        }

        //! Lifetime ended?
        static bool isLifetimeExpired();

        //! Vatsim client id
        static int vatsimClientId()
        {
            static const int id { $$VATSIM_CLIENT_ID };
            return id;
        }

        //! Vatsim client key
        static const QString &vatsimPrivateKey()
        {
          static const auto pk = QString { \"$$VATSIM_CLIENT_PRIVATE_KEY\" };
          return pk;
        }

    };

    class BLACKMISC_EXPORT CVersion
    {
    public:
        //! Version info
        static const QString &version()
        {
            static const QString version(\"$$BLACK_VERSION\");
            Q_ASSERT(!version.isEmpty());
            return version;
        }

        //! Version major
        static int versionMajor() { return $$BLACK_VER_MAJ; }

        //! Version minor
        static int versionMinor() { return $$BLACK_VER_MIN; }

        //! Version patch
        static int versionPatch() { return $$BLACK_VER_PAT; }

        //! Is the given string representing a newer version?
        static bool isNewerVersion(const QString &versionString);

    private:
        //! Parts of version string 1.0.2
        static QList<int> getVersionParts(const QString &versionString);

    };

}

#endif // BLACKCONFIG_H
