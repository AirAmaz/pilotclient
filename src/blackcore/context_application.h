/* Copyright (C) 2013 VATSIM Community / authors
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#ifndef BLACKCORE_CONTEXTAPPLICATION_H
#define BLACKCORE_CONTEXTAPPLICATION_H

#include "blackcore/context.h"
#include "blackmisc/statusmessagelist.h"
#include <QObject>

#define BLACKCORE_CONTEXTAPPLICATION_INTERFACENAME "net.vatsim.PilotClient.BlackCore.ContextApplication"
#define BLACKCORE_CONTEXTAPPLICATION_OBJECTPATH "/Application"

namespace BlackCore
{
    /*!
     * \brief Application context interface
     */
    class IContextApplication : public CContext
    {
        Q_OBJECT
        Q_CLASSINFO("D-Bus Interface", BLACKCORE_CONTEXTAPPLICATION_INTERFACENAME)

    protected:
        //! Constructor
        IContextApplication(CRuntimeConfig::ContextMode mode, CRuntime *runtime) : CContext(mode, runtime) {}

    public:

        //! What output to redirect
        enum RedirectionLevel : uint
        {
            RedirectNone,
            RedirectAllOutput,
            RedirectWarningAndAbove,
            RedirectError
        };

        //! Components
        enum Component : uint
        {
            ComponentGui,
            ComponentCore
        };

        //! What a component does
        enum Actions : uint
        {
            ActionStarts,
            ActionStops
        };

        //! Service name
        static const QString &InterfaceName()
        {
            static QString s(BLACKCORE_CONTEXTAPPLICATION_INTERFACENAME);
            return s;
        }

        //! Service path
        static const QString &ObjectPath()
        {
            static QString s(BLACKCORE_CONTEXTAPPLICATION_OBJECTPATH);
            return s;
        }

        //! Destructor
        virtual ~IContextApplication() {}

        //! Output redirection (redirect my output)
        virtual RedirectionLevel getOutputRedirectionLevel() const = 0;

        //! Output redirection (redirect my output)
        virtual void setOutputRedirectionLevel(RedirectionLevel level) = 0;

        //! Redirected output generated by others
        virtual RedirectionLevel getStreamingForRedirectedOutputLevel() const = 0;

        //! Redirected output generated by others
        virtual void setStreamingForRedirectedOutputLevel(RedirectionLevel level) = 0;

    signals:
        //! \brief Status message
        //! \remarks not to be called directly, use IContextApplication::sendStatusMessage
        void statusMessage(const BlackMisc::CStatusMessage &message);

        //! Send status messages
        //! \remarks not to be called directly, use IContextApplication::sendStatusMessages
        void statusMessages(const BlackMisc::CStatusMessageList &messages);

        //! Redirect output streams as by qDebug(), qWarning(), qCritical()
        //! \remarks context mode is an important means to avoid infinite redirect loops
        //!          never output redirected stream messages from the same context again
        void redirectedOutput(const BlackMisc::CStatusMessage &message, qint64 contextId);

        //! A component changes
        void componentChanged(uint component, uint action);

    public slots:

        //! \brief Ping a token, used to check if application is alive
        virtual qint64 ping(qint64 token) const = 0;

        //! Status message
        virtual void sendStatusMessage(const BlackMisc::CStatusMessage &message) = 0;

        //! Send status messages
        virtual void sendStatusMessages(const BlackMisc::CStatusMessageList &messages) = 0;

        //! A component has changed its state
        virtual void notifyAboutComponentChange(uint component, uint action) = 0;
    };
}

#endif // guard
