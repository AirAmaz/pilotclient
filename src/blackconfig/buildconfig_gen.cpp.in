/* Copyright (C) 2016
 * swift project Community / Contributors
 *
 * This file is part of swift project. It is subject to the license terms in the LICENSE file found in the top-level
 * directory of this distribution and at http://www.swift-project.org/license.html. No part of swift project,
 * including this file, may be copied, modified, propagated, or distributed except according to the terms
 * contained in the LICENSE file.
 */

#include \"blackconfig/buildconfig.h\"
#include <QString>
#include <QDateTime>

const QDateTime &BlackConfig::CBuildConfig::getEol()
{
    static const QString eol(\"$$swiftConfig(endOfLife)\"); // config.pri, defaults in default.json
    static const QDateTime dt(eol.isEmpty() ? QDateTime() : QDateTime::fromString(eol, \"yyyyMMdd\"));
    return dt;
}

int BlackConfig::CBuildConfig::vatsimClientId()
{
    static const int id { $$swiftConfig(vatsim.id) };
    return id;
}

const QString &BlackConfig::CBuildConfig::vatsimPrivateKey()
{
    static const auto pk = QString { \"$$swiftConfig(vatsim.key)\" };
    return pk;
}

const QString &BlackConfig::CBuildConfig::gitHeadSha1()
{
    static const QString gitHeadSha1(\"$$GIT_HEAD_SHA1\");
    Q_ASSERT(!gitHeadSha1.isEmpty());
    return gitHeadSha1;
}

namespace Private
{
    const QDateTime lastCommitTimestampImpl()
    {
        QDateTime dt = QDateTime::fromString(\"$$GIT_COMMIT_TS\", \"yyyyMMddHHmm\");
        dt.setTimeSpec(Qt::UTC);
        return dt;
    }
}

const QDateTime &BlackConfig::CBuildConfig::lastCommitTimestamp()
{
    static const QDateTime dt = Private::lastCommitTimestampImpl();
    return dt;
}
