// SPDX-FileCopyrightText: Copyright (C) 2018 swift Project Community / Contributors
// SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-swift-pilot-client-1

#ifndef IN_BUILDCONFIG_H
#error This file is only to be included by buildconfig.inc
#endif

constexpr bool BlackConfig::CBuildConfig::isCompiledWithBlackCore()
{
!!IF swiftConfig(libs.blackcore)
    return true;
!!ELSE
    return false;
!!ENDIF
}

constexpr bool BlackConfig::CBuildConfig::isCompiledWithBlackSound()
{
!!IF swiftConfig(libs.blacksound)
    return true;
!!ELSE
    return false;
!!ENDIF
}

constexpr bool BlackConfig::CBuildConfig::isCompiledWithBlackInput()
{
!!IF swiftConfig(libs.blackinput)
    return true;
!!ELSE
    return false;
!!ENDIF
}

constexpr bool BlackConfig::CBuildConfig::isCompiledWithFs9Support()
{
!!IF swiftConfig(sims.fs9)
    return true;
!!ELSE
    return false;
!!ENDIF
}

constexpr bool BlackConfig::CBuildConfig::isCompiledWithP3DSupport()
{
!!IF swiftConfig(sims.p3d)
    return true;
!!ELSE
    return false;
!!ENDIF
}

constexpr bool BlackConfig::CBuildConfig::isCompiledWithFsxSupport()
{
!!IF swiftConfig(sims.fsx)
    return true;
!!ELSE
    return false;
!!ENDIF
}

constexpr bool BlackConfig::CBuildConfig::isCompiledWithFsuipcSupport()
{
!!IF swiftConfig(sims.fsuipc)
    return true;
!!ELSE
    return false;
!!ENDIF
}

constexpr bool BlackConfig::CBuildConfig::isCompiledWithXPlaneSupport()
{
!!IF swiftConfig(sims.xplane)
    return true;
!!ELSE
    return false;
!!ENDIF
}

constexpr bool BlackConfig::CBuildConfig::isCompiledWithFGSupport()
{
!!IF swiftConfig(sims.fg)
    return true;
!!ELSE
    return false;
!!ENDIF
}

constexpr bool BlackConfig::CBuildConfig::isCompiledWithGui()
{
!!IF swiftConfig(libs.blackgui)
    return true;
!!ELSE
    return false;
!!ENDIF
}

constexpr bool BlackConfig::CBuildConfig::isVatsimVersion()
{
!!IF swiftConfig(vatsimSupport)
    return true;
!!ELSE
    return false;
!!ENDIF
}

constexpr int BlackConfig::CBuildConfig::versionMajor() { return $$swiftConfig(version.major); }
constexpr int BlackConfig::CBuildConfig::versionMinor() { return $$swiftConfig(version.minor); }
